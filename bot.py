import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ContextTypes, ConversationHandler, filters
)
from datetime import datetime, timedelta
import re

from config import BOT_TOKEN, TIMEZONE, REMINDER_TIMES
from database import Database
from scheduler import Scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_TASK, WAITING_DATE, WAITING_TIME = range(3)

class PlannerBot:
    def __init__(self):
        self.db = Database()
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.scheduler = None
        
    def get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"""
        keyboard = [
            ["üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üìÖ –°–µ–≥–æ–¥–Ω—è"],
            ["üìÜ –ó–∞–≤—Ç—Ä–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_cancel_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
        return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    
    def get_quick_dates_keyboard(self):
        """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç"""
        keyboard = [
            ["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ó–∞–≤—Ç—Ä–∞"],
            ["üóì –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_time_keyboard(self):
        """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
        keyboard = [
            ["‚è∞ –°–µ–π—á–∞—Å", "üïê –ß–µ—Ä–µ–∑ 1 —á–∞—Å"],
            ["üïë –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_back_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
        return ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    
    def get_tasks_with_delete_buttons(self, tasks):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        if not tasks:
            return "üì≠ –ó–∞–¥–∞—á –Ω–µ—Ç!"
        
        tasks_text = ""
        for task in tasks:
            if len(task) == 4:  # –í—Å–µ –∑–∞–¥–∞—á–∏ (id, text, date, time)
                task_id, task_text, task_date, task_time = task
                display_date = datetime.strptime(task_date, "%Y-%m-%d").strftime("%d.%m.%Y")
                tasks_text += f"üÜî {task_id}: {task_text}\n"
                tasks_text += f"   üìÖ {display_date} üïê {task_time}\n"
                tasks_text += f"   üóë –£–¥–∞–ª–∏—Ç—å_{task_id}\n\n"
            else:  # –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ (id, text, time)
                task_id, task_text, task_time = task
                tasks_text += f"üÜî {task_id}: {task_text}\n"
                tasks_text += f"   üïê {task_time}\n"
                tasks_text += f"   üóë –£–¥–∞–ª–∏—Ç—å_{task_id}\n\n"
        
        return tasks_text
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("tasks", self.all_tasks_command))
        self.application.add_handler(CommandHandler("today", self.today_tasks_command))
        self.application.add_handler(CommandHandler("tomorrow", self.tomorrow_tasks_command))
        self.application.add_handler(CommandHandler("delete", self.delete_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ ConversationHandler
        add_conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Text("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), self.start_add_task),
                CommandHandler("add", self.start_add_task)
            ],
            states={
                WAITING_TASK: [
                    MessageHandler(filters.TEXT & ~filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]), self.get_task_text)
                ],
                WAITING_DATE: [
                    MessageHandler(filters.TEXT & ~filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]), self.get_task_date)
                ],
                WAITING_TIME: [
                    MessageHandler(filters.TEXT & ~filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]), self.get_task_time)
                ],
            },
            fallbacks=[
                MessageHandler(filters.Text("‚ùå –û—Ç–º–µ–Ω–∞"), self.cancel_command),
                CommandHandler("cancel", self.cancel_command),
                MessageHandler(filters.Text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), self.back_to_main)
            ],
        )
        self.application.add_handler(add_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu_handlers = [
            MessageHandler(filters.Text("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), self.all_tasks_button),
            MessageHandler(filters.Text("üìÖ –°–µ–≥–æ–¥–Ω—è"), self.today_tasks_button),
            MessageHandler(filters.Text("üìÜ –ó–∞–≤—Ç—Ä–∞"), self.tomorrow_tasks_button),
            MessageHandler(filters.Text("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), self.help_button),
            MessageHandler(filters.Text("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"), self.delete_task_button),
            MessageHandler(filters.Text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), self.back_to_main)
        ]
        
        for handler in main_menu_handlers:
            self.application.add_handler(handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(MessageHandler(filters.Regex(r'^üóë –£–¥–∞–ª–∏—Ç—å_\d+$'), self.quick_delete_task))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ ID
        self.application.add_handler(MessageHandler(filters.Regex(r'^\d+$'), self.delete_by_id))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(MessageHandler(filters.COMMAND, self.unknown_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT, self.handle_any_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name)
        
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
            f"–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫!\n\n"
            f"üìã –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:\n\n"
            f"‚Ä¢ üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            f"‚Ä¢ üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
            f"‚Ä¢ üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID\n"
            f"‚Ä¢ üìÖ –°–µ–≥–æ–¥–Ω—è - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"‚Ä¢ üìÜ –ó–∞–≤—Ç—Ä–∞ - –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            f"‚Ä¢ ‚ÑπÔ∏è –ü–æ–º–æ—â—å - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        )
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=self.get_main_keyboard()
        )
    
    async def start_add_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        logger.info(f"–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        
        context.user_data.clear()
        
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:",
            reply_markup=self.get_cancel_keyboard()
        )
        return WAITING_TASK
    
    async def get_task_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
        task_text = update.message.text.strip()
        if not task_text:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=self.get_cancel_keyboard()
            )
            return WAITING_TASK
        
        time_pattern = r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
        if re.match(time_pattern, task_text):
            await update.message.reply_text(
                "‚ùå –í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
                reply_markup=self.get_cancel_keyboard()
            )
            return WAITING_TASK
        
        context.user_data['task_text'] = task_text
        
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=self.get_quick_dates_keyboard()
        )
        return WAITING_DATE
    
    async def get_task_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏"""
        date_text = update.message.text
        
        if date_text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            task_date = datetime.now().date()
        elif date_text == "üìÜ –ó–∞–≤—Ç—Ä–∞":
            task_date = (datetime.now() + timedelta(days=1)).date()
        elif date_text == "üóì –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
            task_date = (datetime.now() + timedelta(days=2)).date()
        else:
            try:
                task_date = datetime.strptime(date_text, "%d.%m.%Y").date()
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–Ω–æ–ø–æ–∫:",
                    reply_markup=self.get_quick_dates_keyboard()
                )
                return WAITING_DATE
        
        if task_date < datetime.now().date():
            await update.message.reply_text(
                "‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                reply_markup=self.get_quick_dates_keyboard()
            )
            return WAITING_DATE
        
        context.user_data['task_date'] = task_date.strftime("%Y-%m-%d")
        context.user_data['display_date'] = task_date.strftime("%d.%m.%Y")
        
        await update.message.reply_text(
            "üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
            reply_markup=self.get_time_keyboard()
        )
        return WAITING_TIME
    
    async def get_task_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        time_text = update.message.text
        
        if time_text == "‚è∞ –°–µ–π—á–∞—Å":
            now = datetime.now() + timedelta(minutes=1)
            task_time = now.strftime("%H:%M")
        elif time_text == "üïê –ß–µ—Ä–µ–∑ 1 —á–∞—Å":
            task_time = (datetime.now() + timedelta(hours=1)).strftime("%H:%M")
        elif time_text == "üïë –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞":
            task_time = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
        else:
            if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_text):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–Ω–æ–ø–æ–∫:",
                    reply_markup=self.get_time_keyboard()
                )
                return WAITING_TIME
            task_time = time_text
        
        user_id = update.effective_user.id
        task_text = context.user_data['task_text']
        task_date = context.user_data['task_date']
        display_date = context.user_data['display_date']
        
        task_id = self.db.add_task(user_id, task_text, task_date, task_time)
        
        success_text = (
            f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìù {task_text}\n"
            f"üìÖ {display_date}\n"
            f"üïê {task_time}\n\n"
            f"ID –∑–∞–¥–∞—á–∏: {task_id}\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é –æ –∑–∞–¥–∞—á–µ –∑–∞—Ä–∞–Ω–µ–µ! üîî"
        )
        
        await update.message.reply_text(
            success_text, 
            reply_markup=self.get_main_keyboard()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
    
    async def delete_task_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        user_id = update.effective_user.id
        tasks = self.db.get_user_tasks(user_id)
        
        if not tasks:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        tasks_text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        tasks_text += self.get_tasks_with_delete_buttons(tasks)
        tasks_text += "\nüìù –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        
        await update.message.reply_text(
            tasks_text,
            reply_markup=self.get_back_keyboard()
        )
    
    async def delete_by_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É ID"""
        if context.user_data:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'",
                reply_markup=self.get_cancel_keyboard()
            )
            return
        
        user_id = update.effective_user.id
        task_id_text = update.message.text
        
        try:
            task_id = int(task_id_text)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID –∑–∞–¥–∞—á–∏):",
                reply_markup=self.get_back_keyboard()
            )
            return
        
        user_tasks = self.db.get_user_tasks(user_id)
        task_exists = any(task[0] == task_id for task in user_tasks)
        
        if not task_exists:
            await update.message.reply_text(
                f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!",
                reply_markup=self.get_back_keyboard()
            )
            return
        
        self.db.delete_task(task_id, user_id)
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=self.get_main_keyboard()
        )
    
    async def quick_delete_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–∫–µ"""
        user_id = update.effective_user.id
        button_text = update.message.text
        task_id = int(button_text.split('_')[1])
        
        self.db.delete_task(task_id, user_id)
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=self.get_main_keyboard()
        )
    
    async def delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
        await self.delete_task_button(update, context)
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=self.get_main_keyboard()
        )
        return ConversationHandler.END
    
    async def back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if context.user_data:
            context.user_data.clear()
        
        await update.message.reply_text(
            "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=self.get_main_keyboard()
        )
        return ConversationHandler.END
    
    async def all_tasks_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        await self.all_tasks_command(update, context)
    
    async def all_tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        tasks = self.db.get_user_tasks(user_id)
        
        if not tasks:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        tasks_text = "üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
        tasks_text += self.get_tasks_with_delete_buttons(tasks)
        
        await update.message.reply_text(tasks_text, reply_markup=self.get_main_keyboard())
    
    async def today_tasks_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        await self.today_tasks_command(update, context)
    
    async def today_tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = update.effective_user.id
        today = datetime.now().strftime("%Y-%m-%d")
        tasks = self.db.get_user_tasks(user_id, today)
        
        if not tasks:
            await update.message.reply_text(
                "üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç! –ú–æ–∂–µ—Ç–µ –æ—Ç–¥—ã—Ö–∞—Ç—å!",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        tasks_text = "üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        tasks_text += self.get_tasks_with_delete_buttons(tasks)
        
        await update.message.reply_text(tasks_text, reply_markup=self.get_main_keyboard())
    
    async def tomorrow_tasks_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        await self.tomorrow_tasks_command(update, context)
    
    async def tomorrow_tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        user_id = update.effective_user.id
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        tasks = self.db.get_user_tasks(user_id, tomorrow)
        
        if not tasks:
            await update.message.reply_text(
                "üì≠ –ù–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç!",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        tasks_text = "üìÜ –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n"
        tasks_text += self.get_tasks_with_delete_buttons(tasks)
        
        await update.message.reply_text(tasks_text, reply_markup=self.get_main_keyboard())
    
    async def help_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
        await self.help_command(update, context)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "üî∏ üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "üî∏ üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n"
            "üî∏ üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID\n"
            "üî∏ üìÖ –°–µ–≥–æ–¥–Ω—è - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "üî∏ üìÜ –ó–∞–≤—Ç—Ä–∞ - –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n\n"
            "üí° –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ)\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ)\n\n"
            "üí° –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É:\n"
            "‚Ä¢ –°–ø–æ—Å–æ–± 1: –ù–∞–∂–º–∏—Ç–µ 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É' –∏ –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –°–ø–æ—Å–æ–± 2: –í —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üóë –£–¥–∞–ª–∏—Ç—å_X'\n\n"
            "‚è∞ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–¥–∞—á–µ –∑–∞ 5, 15, 30 –∏ 60 –º–∏–Ω—É—Ç!\n\n"
            "‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ - –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'\n"
            "‚¨ÖÔ∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'"
        )
        await update.message.reply_text(help_text, reply_markup=self.get_main_keyboard())
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.",
            reply_markup=self.get_main_keyboard()
        )
    
    async def handle_any_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if context.user_data:
            return
            
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:",
            reply_markup=self.get_main_keyboard()
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.db.check_database_status()
        
        self.setup_handlers()
        
        self.scheduler = Scheduler(self.application.bot)
        self.scheduler.start()
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        self.application.run_polling()
        
        if self.scheduler:
            self.scheduler.stop()

if __name__ == "__main__":
    bot = PlannerBot()
    bot.run()
