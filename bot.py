# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from datetime import datetime, timedelta

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_WEEKLY_TASK, WAITING_WEEKLY_WEEK = range(4, 6)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π

class PlannerBot:
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    
    def get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"""
        keyboard = [
            ["üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üìÖ –°–µ–≥–æ–¥–Ω—è"],
            ["üìÜ –ó–∞–≤—Ç—Ä–∞", "üóì –ù–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏"],
            ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_weekly_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
        keyboard = [
            ["üìã –ú–æ–∏ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_week_choice_keyboard(self):
        """–í—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        today = datetime.now().date()
        current_week_start = self._get_week_start(today)
        next_week_start = current_week_start + timedelta(days=7)
        
        keyboard = [
            [f"üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è ({current_week_start.strftime('%d.%m')})"],
            [f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ({next_week_start.strftime('%d.%m')})"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def _get_week_start(self, date):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"""
        return date - timedelta(days=date.weekday())
    
    # –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ setup_handlers
    def setup_handlers(self):
        # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        self.application.add_handler(MessageHandler(filters.Text("üóì –ù–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏"), self.weekly_tasks_menu))
        self.application.add_handler(MessageHandler(filters.Text("üìã –ú–æ–∏ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏"), self.show_weekly_tasks))
        self.application.add_handler(MessageHandler(filters.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"), self.start_add_weekly_task))
        
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        weekly_conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"), self.start_add_weekly_task)
            ],
            states={
                WAITING_WEEKLY_TASK: [
                    MessageHandler(filters.TEXT & ~filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]), self.get_weekly_task_text)
                ],
                WAITING_WEEKLY_WEEK: [
                    MessageHandler(filters.TEXT & ~filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]), self.get_weekly_task_week)
                ],
            },
            fallbacks=[
                MessageHandler(filters.Text("‚ùå –û—Ç–º–µ–Ω–∞"), self.cancel_command),
                MessageHandler(filters.Text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), self.back_to_main)
            ],
        )
        self.application.add_handler(weekly_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        self.application.add_handler(MessageHandler(filters.Regex(r'^‚úì –í—ã–ø–æ–ª–Ω–∏—Ç—å_\d+$'), self.complete_weekly_task))
    
    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    
    async def weekly_tasks_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
        await update.message.reply_text(
            "üóì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏:\n\n"
            "‚Ä¢ –ó–∞–¥–∞—á–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00\n"
            "‚Ä¢ –ê–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
            reply_markup=self.get_weekly_keyboard()
        )
    
    async def start_add_weekly_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        context.user_data.clear()
        
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏:",
            reply_markup=self.get_cancel_keyboard()
        )
        return WAITING_WEEKLY_TASK
    
    async def get_weekly_task_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        task_text = update.message.text.strip()
        if not task_text:
            await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return WAITING_WEEKLY_TASK
        
        context.user_data['weekly_task_text'] = task_text
        
        today = datetime.now().date()
        current_week_start = self._get_week_start(today)
        next_week_start = current_week_start + timedelta(days=7)
        
        await update.message.reply_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–∞–¥–∞—á–∏:\n\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è: {current_week_start.strftime('%d.%m')} - {(current_week_start + timedelta(days=6)).strftime('%d.%m.%Y')}\n"
            f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è: {next_week_start.strftime('%d.%m')} - {(next_week_start + timedelta(days=6)).strftime('%d.%m.%Y')}",
            reply_markup=self.get_week_choice_keyboard()
        )
        return WAITING_WEEKLY_WEEK
    
    async def get_weekly_task_week(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        week_choice = update.message.text
        user_id = update.effective_user.id
        task_text = context.user_data['weekly_task_text']
        
        today = datetime.now().date()
        
        if "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è" in week_choice:
            week_start = self._get_week_start(today)
        elif "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è" in week_choice:
            week_start = self._get_week_start(today) + timedelta(days=7)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏!")
            return WAITING_WEEKLY_WEEK
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        task_id = self.db.add_weekly_task(user_id, task_text, week_start.strftime("%Y-%m-%d"))
        
        week_end = week_start + timedelta(days=6)
        success_text = (
            f"‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìù {task_text}\n"
            f"üìÖ –ù–µ–¥–µ–ª—è: {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}\n\n"
            f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–µ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00! ‚è∞"
        )
        
        await update.message.reply_text(
            success_text,
            reply_markup=self.get_main_keyboard()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
    
    async def show_weekly_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        today = datetime.now().date()
        current_week_start = self._get_week_start(today)
        
        tasks = self.db.get_weekly_tasks(user_id, current_week_start.strftime("%Y-%m-%d"))
        
        if not tasks:
            await update.message.reply_text(
                "üì≠ –ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç!",
                reply_markup=self.get_weekly_keyboard()
            )
            return
        
        week_end = current_week_start + timedelta(days=6)
        tasks_text = f"üóì –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é ({current_week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}):\n\n"
        
        completed_count = 0
        for task_id, task_text, completed in tasks:
            if completed:
                tasks_text += f"‚úÖ {task_text}\n"
                completed_count += 1
            else:
                tasks_text += f"üìù {task_text}\n"
                tasks_text += f"   ‚úì –í—ã–ø–æ–ª–Ω–∏—Ç—å_{task_id}\n\n"
        
        total_count = len(tasks)
        tasks_text += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_count}/{total_count} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        
        if completed_count == total_count:
            tasks_text += "\n\nüéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        
        await update.message.reply_text(
            tasks_text,
            reply_markup=self.get_weekly_keyboard()
        )
    
    async def complete_weekly_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        user_id = update.effective_user.id
        button_text = update.message.text
        task_id = int(button_text.split('_')[1])
        
        self.db.complete_weekly_task(task_id, user_id)
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!",
            reply_markup=self.get_weekly_keyboard()
        )
    
    # –û–±–Ω–æ–≤–∏—Ç–µ help_command
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "üî∏ üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –∑–∞–¥–∞—á–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º\n"
            "üî∏ üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "üî∏ üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID\n"
            "üî∏ üìÖ –°–µ–≥–æ–¥–Ω—è - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "üî∏ üìÜ –ó–∞–≤—Ç—Ä–∞ - –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "üî∏ üóì –ù–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é\n\n"
            "üóì –ù–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
            "‚Ä¢ –ë–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00\n"
            "‚Ä¢ –ê–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â—É—é –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n\n"
            "‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        )
        await update.message.reply_text(help_text, reply_markup=self.get_main_keyboard())
