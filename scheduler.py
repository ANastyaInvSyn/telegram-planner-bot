import threading
import time
import datetime
from database import Database
import logging
from config import REMINDER_TIMES

logger = logging.getLogger(__name__)

class Scheduler:
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.is_running = False
        self.thread = None
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.is_running = True
        self.thread = threading.Thread(target=self._run)
        self.thread.daemon = True
        self.thread.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        if self.thread:
            self.thread.join()
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.is_running:
            try:
                self._check_daily_reminders()
                self._check_weekly_reminders()
                self._check_week_transition()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)
    
    def _check_daily_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        now = datetime.datetime.now()
        
        for minutes_before in REMINDER_TIMES:
            reminder_time = now + datetime.timedelta(minutes=minutes_before)
            tasks = self.db.get_tasks_for_reminder(reminder_time)
            
            if tasks:
                task_ids = []
                for task in tasks:
                    task_id, user_id, task_text, task_date, task_time, first_name = task
                    task_ids.append(task_id)
                    
                    message = (
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, {first_name}!\n"
                        f"–ß–µ—Ä–µ–∑ {minutes_before} –º–∏–Ω—É—Ç:\n"
                        f"üìù {task_text}\n"
                        f"üïê {task_time}\n"
                        f"üìÖ {task_date}"
                    )
                    
                    try:
                        self.bot.send_message(chat_id=user_id, text=message)
                        logger.info(f"üì® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")
                
                if task_ids:
                    self.db.mark_as_reminded(task_ids)
    
    def _check_weekly_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –≤ 10:00"""
        now = datetime.datetime.now()
        
        if now.hour == 10 and now.minute == 0:
            today = datetime.date.today()
            week_start = self._get_week_start(today)
            
            users = self.db.get_users_for_weekly_reminder()
            
            for user_id in users:
                try:
                    tasks = self.db.get_weekly_tasks(user_id, week_start.strftime('%Y-%m-%d'))
                    if tasks:
                        message = self._format_weekly_reminder(tasks, week_start)
                        self.bot.send_message(chat_id=user_id, text=message)
                        logger.info(f"üì® –ù–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    def _check_week_transition(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é (–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:01)"""
        now = datetime.datetime.now()
        
        if now.weekday() == 0 and now.hour == 0 and now.minute == 1:
            last_week = self._get_week_start(datetime.date.today() - datetime.timedelta(days=7))
            current_week = self._get_week_start(datetime.date.today())
            
            self.db.move_uncompleted_weekly_tasks(
                last_week.strftime('%Y-%m-%d'), 
                current_week.strftime('%Y-%m-%d')
            )
            logger.info(f"üîÑ –ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Å {last_week} –Ω–∞ {current_week}")
    
    def _get_week_start(self, date):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"""
        return date - datetime.timedelta(days=date.weekday())
    
    def _format_weekly_reminder(self, tasks, week_start):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
        week_end = week_start + datetime.timedelta(days=6)
        week_range = f"{week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}"
        
        message = f"üóì –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é ({week_range}):\n\n"
        
        completed_count = 0
        for task_id, task_text, completed in tasks:
            if completed:
                message += f"‚úÖ {task_text}\n"
                completed_count += 1
            else:
                message += f"üìù {task_text}\n"
                message += f"   ‚úì –í—ã–ø–æ–ª–Ω–∏—Ç—å_{task_id}\n\n"
        
        total_count = len(tasks)
        message += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_count}/{total_count} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        
        if completed_count < total_count:
            message += "\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏! üí™"
        
        return message
