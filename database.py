import os
import psycopg2
from datetime import datetime, timedelta
from typing import List, Tuple, Optional
import logging

logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        self.conn = None
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Render"""
        try:
            database_url = os.environ.get('DATABASE_URL')
            
            if database_url:
                print(f"üîó –ù–∞–π–¥–µ–Ω DATABASE_URL: {database_url[:50]}...")
                
                if database_url.startswith('postgres://'):
                    database_url = database_url.replace('postgres://', 'postgresql://', 1)
                    print("‚úÖ –§–æ—Ä–º–∞—Ç URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è psycopg2")
                
                self.conn = psycopg2.connect(database_url, sslmode='require')
                self._create_tables()
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL –Ω–∞ Render")
                
            else:
                print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        if not self.conn:
            return
            
        cursor = self.conn.cursor()
        
        try:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS tasks (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    task_text TEXT NOT NULL,
                    task_date DATE NOT NULL,
                    task_time TIME NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    reminded BOOLEAN DEFAULT FALSE,
                    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS weekly_tasks (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    task_text TEXT NOT NULL,
                    week_start DATE NOT NULL,
                    completed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
                )
            ''')
            
            self.conn.commit()
            cursor.close()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            self.conn.rollback()
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –ï–ñ–ï–î–ù–ï–í–ù–´–• –ó–ê–î–ê–ß ===
    
    def add_user(self, user_id: int, username: str, first_name: str):
        if self.conn:
            cursor = self.conn.cursor()
            try:
                cursor.execute('''
                    INSERT INTO users (user_id, username, first_name)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (user_id) DO NOTHING
                ''', (user_id, username, first_name))
                self.conn.commit()
                cursor.close()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                self.conn.rollback()
    
    def add_task(self, user_id: int, task_text: str, task_date: str, task_time: str) -> int:
        if self.conn:
            cursor = self.conn.cursor()
            try:
                cursor.execute('''
                    INSERT INTO tasks (user_id, task_text, task_date, task_time)
                    VALUES (%s, %s, %s, %s)
                    RETURNING id
                ''', (user_id, task_text, task_date, task_time))
                
                task_id = cursor.fetchone()[0]
                self.conn.commit()
                cursor.close()
                print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {task_id}")
                return task_id
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
                self.conn.rollback()
                return 0
        return 0
    
    def get_user_tasks(self, user_id: int, date: str = None) -> List[Tuple]:
        if not self.conn:
            return []
            
        cursor = self.conn.cursor()
        try:
            if date:
                cursor.execute('''
                    SELECT id, task_text, task_time FROM tasks 
                    WHERE user_id = %s AND task_date = %s 
                    ORDER BY task_time
                ''', (user_id, date))
            else:
                cursor.execute('''
                    SELECT id, task_text, task_date, task_time FROM tasks 
                    WHERE user_id = %s 
                    ORDER BY task_date, task_time
                ''', (user_id,))
            
            tasks = cursor.fetchall()
            cursor.close()
            return tasks
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            return []
    
    def delete_task(self, task_id: int, user_id: int):
        if self.conn:
            cursor = self.conn.cursor()
            try:
                cursor.execute('''
                    DELETE FROM tasks WHERE id = %s AND user_id = %s
                ''', (task_id, user_id))
                self.conn.commit()
                cursor.close()
                print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
                self.conn.rollback()
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ï–î–ï–õ–¨–ù–´–• –ó–ê–î–ê–ß ===
    
    def add_weekly_task(self, user_id: int, task_text: str, week_start: str) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"""
        if self.conn:
            cursor = self.conn.cursor()
            try:
                cursor.execute('''
                    INSERT INTO weekly_tasks (user_id, task_text, week_start)
                    VALUES (%s, %s, %s)
                    RETURNING id
                ''', (user_id, task_text, week_start))
                
                task_id = cursor.fetchone()[0]
                self.conn.commit()
                cursor.close()
                print(f"‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {task_id}")
                return task_id
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
                self.conn.rollback()
                return 0
        return 0
    
    def get_weekly_tasks(self, user_id: int, week_start: str) -> List[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ–¥–µ–ª–∏"""
        if not self.conn:
            return []
            
        cursor = self.conn.cursor()
        try:
            cursor.execute('''
                SELECT id, task_text, completed 
                FROM weekly_tasks 
                WHERE user_id = %s AND week_start = %s 
                ORDER BY created_at
            ''', (user_id, week_start))
            
            tasks = cursor.fetchall()
            cursor.close()
            return tasks
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            return []
    
    def complete_weekly_task(self, task_id: int, user_id: int):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        if self.conn:
            cursor = self.conn.cursor()
            try:
                cursor.execute('''
                    UPDATE weekly_tasks 
                    SET completed = TRUE 
                    WHERE id = %s AND user_id = %s
                ''', (task_id, user_id))
                
                self.conn.commit()
                cursor.close()
                print(f"‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
                self.conn.rollback()
    
    def delete_weekly_task(self, task_id: int, user_id: int):
        """–£–¥–∞–ª–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"""
        if self.conn:
            cursor = self.conn.cursor()
            try:
                cursor.execute('''
                    DELETE FROM weekly_tasks 
                    WHERE id = %s AND user_id = %s
                ''', (task_id, user_id))
                
                self.conn.commit()
                cursor.close()
                print(f"‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
                self.conn.rollback()
    
    def move_uncompleted_weekly_tasks(self, from_week: str, to_week: str):
        """–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
        if self.conn:
            cursor = self.conn.cursor()
            try:
                cursor.execute('''
                    UPDATE weekly_tasks 
                    SET week_start = %s, completed = FALSE
                    WHERE week_start = %s AND completed = FALSE
                ''', (to_week, from_week))
                
                self.conn.commit()
                cursor.close()
                print(f"‚úÖ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Å {from_week} –Ω–∞ {to_week}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
                self.conn.rollback()
    
    def get_users_for_weekly_reminder(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        if not self.conn:
            return []
            
        cursor = self.conn.cursor()
        try:
            cursor.execute('''
                SELECT DISTINCT user_id 
                FROM weekly_tasks 
                WHERE completed = FALSE
            ''')
            
            users = [row[0] for row in cursor.fetchall()]
            cursor.close()
            return users
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return []
